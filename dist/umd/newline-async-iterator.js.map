{"version":3,"file":"newline-async-iterator.js","sources":["../../node_modules/index-of-newline/dist/esm/index.mjs","../../src/decodeUTF8.ts","../../src/index.ts"],"sourcesContent":["/**\n * Find indexOf CR, LF, or CRLF\n *\n * @param string The search string\n * @param offset The offset for searching\n * @param includeLength Include the length in the return value\n * @returns When includeLength is true, returns a pair of [offset, length] to provide the length of CR (1), LF (1) or CRLF (2)\n */ export default function indexOfNewline(string, offset = 0, includeLength = false) {\n    if (offset < 0) throw new Error('Unexpected negative offset');\n    if (offset > string.length) throw new Error(`Offset is longer than the string. Offset: ${offset}. String: ${string.length}`);\n    while(offset < string.length){\n        const value = string[offset];\n        if (value === '\\n') return includeLength ? [\n            offset,\n            1\n        ] : offset;\n        else if (value === '\\r') {\n            return includeLength ? [\n                offset,\n                string[offset + 1] === '\\n' ? 2 : 1\n            ] : offset;\n        }\n        offset++;\n    }\n    return includeLength ? [\n        -1,\n        0\n    ] : -1;\n};\n","// https://developer.mozilla.org/en-US/docs/Glossary/Base64#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\n/* c8 ignore start */\nlet decodeUTF8 = function decode(uint8Array: Uint8Array): string {\n  let sView = '';\n\n  for (let nPart: number, nLen = uint8Array.length, nIdx = 0; nIdx < nLen; nIdx++) {\n    nPart = uint8Array[nIdx];\n    sView += String.fromCharCode(\n      nPart > 251 && nPart < 254 && nIdx + 5 < nLen /* six bytes */\n        ? /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */\n          (nPart - 252) * 1073741824 + ((uint8Array[++nIdx] - 128) << 24) + ((uint8Array[++nIdx] - 128) << 18) + ((uint8Array[++nIdx] - 128) << 12) + ((uint8Array[++nIdx] - 128) << 6) + uint8Array[++nIdx] - 128\n        : nPart > 247 && nPart < 252 && nIdx + 4 < nLen /* five bytes */\n          ? ((nPart - 248) << 24) + ((uint8Array[++nIdx] - 128) << 18) + ((uint8Array[++nIdx] - 128) << 12) + ((uint8Array[++nIdx] - 128) << 6) + uint8Array[++nIdx] - 128\n          : nPart > 239 && nPart < 248 && nIdx + 3 < nLen /* four bytes */\n            ? ((nPart - 240) << 18) + ((uint8Array[++nIdx] - 128) << 12) + ((uint8Array[++nIdx] - 128) << 6) + uint8Array[++nIdx] - 128\n            : nPart > 223 && nPart < 240 && nIdx + 2 < nLen /* three bytes */\n              ? ((nPart - 224) << 12) + ((uint8Array[++nIdx] - 128) << 6) + uint8Array[++nIdx] - 128\n              : nPart > 191 && nPart < 224 && nIdx + 1 < nLen /* two bytes */\n                ? ((nPart - 192) << 6) + uint8Array[++nIdx] - 128\n                : /* nPart < 127 ? */ /* one byte */\n                  nPart\n    );\n  }\n\n  return sView;\n};\n/* c8 ignore stop */\n\nif (typeof TextDecoder !== 'undefined') {\n  const decoder = new TextDecoder('utf8');\n  decodeUTF8 = function decodeTextDecoder(uint8Array: Uint8Array): string {\n    return decoder.decode(uint8Array);\n  };\n}\n\nexport default decodeUTF8;\n","import indexOfNewline from 'index-of-newline';\n// @ts-ignore\nimport decodeUTF8 from './decodeUTF8.ts';\n\nconst hasIterator = typeof Symbol !== 'undefined' && Symbol.asyncIterator;\n\n/**\n * Create a newline iterator recognizing CR, LF, and CRLF using the Symbol.asyncIterator interface\n *\n * @param string The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-async-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */\n\nexport default function newlineIterator(source: AsyncIterable<Uint8Array> | AsyncIterator<Uint8Array>): AsyncIterableIterator<string> {\n  let string = '';\n  let done = false;\n\n  /* c8 ignore start */\n  const sourceIterator = hasIterator ? source[Symbol.asyncIterator]() : source;\n  /* c8 ignore stop */\n\n  function generateNext(): Promise<number[]> {\n    return new Promise((resolve, reject) => {\n      const args = indexOfNewline(string, 0, true) as number[];\n      const index = args[0];\n      const skip = args[1];\n      if (index >= 0) {\n        if (index !== string.length - 1 || string[index] === '\\n') return resolve([index, skip]);\n      }\n      if (done) return resolve([index, skip]);\n      sourceIterator.next().then((next) => {\n        if (next.done) done = true;\n        if (next.value !== undefined) string += decodeUTF8(next.value);\n        generateNext().then(resolve).catch(reject);\n      });\n    });\n  }\n\n  const iterator = {\n    next(): Promise<IteratorResult<string, boolean>> {\n      return new Promise((resolve, reject) => {\n        generateNext()\n          .then((args) => {\n            const index = args[0];\n            const skip = args[1];\n            if (index < 0) {\n              if (!string.length) return resolve({ value: undefined, done: true });\n              const result: IteratorResult<string, boolean> = {\n                value: string,\n                done: false,\n              };\n              string = '';\n              return resolve(result);\n            }\n            const line = string.substr(0, index);\n            string = string.substr(index + skip);\n            return resolve({ value: line, done: false });\n          })\n          .catch(reject);\n      });\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<string> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<string>;\n}\n"],"names":["indexOfNewline","string","offset","includeLength","Error","length","value","decodeUTF8","decode","uint8Array","sView","nPart","nLen","nIdx","String","fromCharCode","TextDecoder","decoder","decodeTextDecoder","hasIterator","Symbol","asyncIterator","newlineIterator","source","done","sourceIterator","generateNext","Promise","resolve","reject","args","index","skip","next","then","undefined","catch","iterator","result","line","substr"],"mappings":"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"}