{"version":3,"file":"newline-async-iterator.js","sources":["../../src/decodeUTF8.ts","../../src/index.ts"],"sourcesContent":["// https://developer.mozilla.org/en-US/docs/Glossary/Base64#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\n/* c8 ignore start */\nlet decodeUTF8 = function decode(uint8Array: Uint8Array): string {\n  let sView = '';\n\n  for (let nPart: number, nLen = uint8Array.length, nIdx = 0; nIdx < nLen; nIdx++) {\n    nPart = uint8Array[nIdx];\n    sView += String.fromCharCode(\n      nPart > 251 && nPart < 254 && nIdx + 5 < nLen /* six bytes */\n        ? /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */\n          (nPart - 252) * 1073741824 + ((uint8Array[++nIdx] - 128) << 24) + ((uint8Array[++nIdx] - 128) << 18) + ((uint8Array[++nIdx] - 128) << 12) + ((uint8Array[++nIdx] - 128) << 6) + uint8Array[++nIdx] - 128\n        : nPart > 247 && nPart < 252 && nIdx + 4 < nLen /* five bytes */\n          ? ((nPart - 248) << 24) + ((uint8Array[++nIdx] - 128) << 18) + ((uint8Array[++nIdx] - 128) << 12) + ((uint8Array[++nIdx] - 128) << 6) + uint8Array[++nIdx] - 128\n          : nPart > 239 && nPart < 248 && nIdx + 3 < nLen /* four bytes */\n            ? ((nPart - 240) << 18) + ((uint8Array[++nIdx] - 128) << 12) + ((uint8Array[++nIdx] - 128) << 6) + uint8Array[++nIdx] - 128\n            : nPart > 223 && nPart < 240 && nIdx + 2 < nLen /* three bytes */\n              ? ((nPart - 224) << 12) + ((uint8Array[++nIdx] - 128) << 6) + uint8Array[++nIdx] - 128\n              : nPart > 191 && nPart < 224 && nIdx + 1 < nLen /* two bytes */\n                ? ((nPart - 192) << 6) + uint8Array[++nIdx] - 128\n                : /* nPart < 127 ? */ /* one byte */\n                  nPart\n    );\n  }\n\n  return sView;\n};\n/* c8 ignore stop */\n\nif (typeof TextDecoder !== 'undefined') {\n  const decoder = new TextDecoder('utf8');\n  decodeUTF8 = function decodeTextDecoder(uint8Array: Uint8Array): string {\n    return decoder.decode(uint8Array);\n  };\n}\n\nexport default decodeUTF8;\n","import indexOfNewline from 'index-of-newline';\n// @ts-ignore\nimport decodeUTF8 from './decodeUTF8.ts';\n\nconst hasIterator = typeof Symbol !== 'undefined' && Symbol.asyncIterator;\n\n/**\n * Create a newline iterator recognizing CR, LF, and CRLF using the Symbol.asyncIterator interface\n *\n * @param source The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-async-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */\n\nexport default function newlineIterator(source: AsyncIterable<Uint8Array> | AsyncIterator<Uint8Array>): AsyncIterableIterator<string> {\n  let string = '';\n  let done = false;\n\n  /* c8 ignore start */\n  const sourceIterator = hasIterator ? source[Symbol.asyncIterator]() : source;\n  /* c8 ignore stop */\n\n  function generateNext(): Promise<number[]> {\n    return new Promise((resolve, reject) => {\n      const args = indexOfNewline(string, 0, true) as number[];\n      const index = args[0];\n      const skip = args[1];\n      if (index >= 0) {\n        if (index !== string.length - 1 || string[index] === '\\n') return resolve([index, skip]);\n      }\n      if (done) return resolve([index, skip]);\n      sourceIterator.next().then((next) => {\n        if (next.done) done = true;\n        if (next.value !== undefined) string += decodeUTF8(next.value);\n        generateNext().then(resolve).catch(reject);\n      });\n    });\n  }\n\n  const iterator = {\n    next(): Promise<IteratorResult<string, boolean>> {\n      return new Promise((resolve, reject) => {\n        generateNext()\n          .then((args) => {\n            const index = args[0];\n            const skip = args[1];\n            if (index < 0) {\n              if (!string.length) return resolve({ value: undefined, done: true });\n              const result: IteratorResult<string, boolean> = {\n                value: string,\n                done: false,\n              };\n              string = '';\n              return resolve(result);\n            }\n            const line = string.substr(0, index);\n            string = string.substr(index + skip);\n            return resolve({ value: line, done: false });\n          })\n          .catch(reject);\n      });\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<string> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<string>;\n}\n"],"names":["decodeUTF8","decode","uint8Array","sView","nPart","nLen","length","nIdx","String","fromCharCode","TextDecoder","decoder","decodeTextDecoder","hasIterator","Symbol","asyncIterator","newlineIterator","source","string","done","sourceIterator","generateNext","Promise","resolve","reject","args","indexOfNewline","index","skip","next","then","value","undefined","catch","iterator","result","line","substr"],"mappings":"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"}