{"version":3,"file":"newline-async-iterator.min.js","sources":["../../src/decodeUTF8.ts","../../src/index.ts"],"sourcesContent":["// https://developer.mozilla.org/en-US/docs/Glossary/Base64#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\n/* c8 ignore start */\nlet decodeUTF8 = function decode(uint8Array: Uint8Array): string {\n  let sView = '';\n\n  for (let nPart: number, nLen = uint8Array.length, nIdx = 0; nIdx < nLen; nIdx++) {\n    nPart = uint8Array[nIdx];\n    sView += String.fromCharCode(\n      nPart > 251 && nPart < 254 && nIdx + 5 < nLen /* six bytes */\n        ? /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */\n          (nPart - 252) * 1073741824 + ((uint8Array[++nIdx] - 128) << 24) + ((uint8Array[++nIdx] - 128) << 18) + ((uint8Array[++nIdx] - 128) << 12) + ((uint8Array[++nIdx] - 128) << 6) + uint8Array[++nIdx] - 128\n        : nPart > 247 && nPart < 252 && nIdx + 4 < nLen /* five bytes */\n          ? ((nPart - 248) << 24) + ((uint8Array[++nIdx] - 128) << 18) + ((uint8Array[++nIdx] - 128) << 12) + ((uint8Array[++nIdx] - 128) << 6) + uint8Array[++nIdx] - 128\n          : nPart > 239 && nPart < 248 && nIdx + 3 < nLen /* four bytes */\n            ? ((nPart - 240) << 18) + ((uint8Array[++nIdx] - 128) << 12) + ((uint8Array[++nIdx] - 128) << 6) + uint8Array[++nIdx] - 128\n            : nPart > 223 && nPart < 240 && nIdx + 2 < nLen /* three bytes */\n              ? ((nPart - 224) << 12) + ((uint8Array[++nIdx] - 128) << 6) + uint8Array[++nIdx] - 128\n              : nPart > 191 && nPart < 224 && nIdx + 1 < nLen /* two bytes */\n                ? ((nPart - 192) << 6) + uint8Array[++nIdx] - 128\n                : /* nPart < 127 ? */ /* one byte */\n                  nPart\n    );\n  }\n\n  return sView;\n};\n/* c8 ignore stop */\n\nif (typeof TextDecoder !== 'undefined') {\n  const decoder = new TextDecoder('utf8');\n  decodeUTF8 = function decodeTextDecoder(uint8Array: Uint8Array): string {\n    return decoder.decode(uint8Array);\n  };\n}\n\nexport default decodeUTF8;\n","import indexOfNewline from 'index-of-newline';\n// @ts-ignore\nimport decodeUTF8 from './decodeUTF8.ts';\n\nconst hasIterator = typeof Symbol !== 'undefined' && Symbol.asyncIterator;\n\n/**\n * Create a newline iterator recognizing CR, LF, and CRLF using the Symbol.asyncIterator interface\n *\n * @param source The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-async-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */\n\nexport default function newlineIterator(source: AsyncIterable<Uint8Array> | AsyncIterator<Uint8Array>): AsyncIterableIterator<string> {\n  let string = '';\n  let done = false;\n\n  /* c8 ignore start */\n  const sourceIterator = hasIterator ? source[Symbol.asyncIterator]() : source;\n  /* c8 ignore stop */\n\n  function generateNext(): Promise<number[]> {\n    return new Promise((resolve, reject) => {\n      const args = indexOfNewline(string, 0, true) as number[];\n      const index = args[0];\n      const skip = args[1];\n      if (index >= 0) {\n        if (index !== string.length - 1 || string[index] === '\\n') return resolve([index, skip]);\n      }\n      if (done) return resolve([index, skip]);\n      sourceIterator.next().then((next) => {\n        if (next.done) done = true;\n        if (next.value !== undefined) string += decodeUTF8(next.value);\n        generateNext().then(resolve).catch(reject);\n      });\n    });\n  }\n\n  const iterator = {\n    next(): Promise<IteratorResult<string, boolean>> {\n      return new Promise((resolve, reject) => {\n        generateNext()\n          .then((args) => {\n            const index = args[0];\n            const skip = args[1];\n            if (index < 0) {\n              if (!string.length) return resolve({ value: undefined, done: true });\n              const result: IteratorResult<string, boolean> = {\n                value: string,\n                done: false,\n              };\n              string = '';\n              return resolve(result);\n            }\n            const line = string.substr(0, index);\n            string = string.substr(index + skip);\n            return resolve({ value: line, done: false });\n          })\n          .catch(reject);\n      });\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<string> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<string>;\n}\n"],"names":["decodeUTF8","uint8Array","nPart","sView","nLen","length","nIdx","String","fromCharCode","TextDecoder","decoder","decode","decodeUTF8$1","hasIterator","Symbol","asyncIterator","source","string","done","sourceIterator","generateNext","Promise","resolve","reject","args","indexOfNewline","index","skip","next","then","undefined","value","catch","iterator","result","line","substr","this"],"mappings":"sTAEA,IAAIA,EAAa,SAAgBC,GAG/B,IAFA,IAESC,EAFLC,EAAQ,GAEYC,EAAOH,EAAWI,OAAQC,EAAO,EAAGA,EAAOF,EAAME,IACvEJ,EAAQD,EAAWK,GACnBH,GAASI,OAAOC,aACdN,EAAQ,KAAOA,EAAQ,KAAOI,EAAO,EAAIF,EAErB,YAAfF,EAAQ,MAAqBD,IAAcK,GAAQ,KAAQ,KAAQL,IAAaK,GAAQ,KAAQ,KAAQL,IAAaK,GAAQ,KAAQ,KAAOL,IAAcK,GAAQ,KAAQ,GAAKL,IAAaK,GAAQ,IACrMJ,EAAQ,KAAOA,EAAQ,KAAOI,EAAO,EAAIF,GACrCF,EAAQ,KAAQ,KAAOD,IAAcK,GAAQ,KAAQ,KAAQL,IAAaK,GAAQ,KAAQ,KAAQL,IAAaK,GAAQ,KAAQ,GAAKL,IAAaK,GAAQ,IAC3JJ,EAAQ,KAAOA,EAAQ,KAAOI,EAAO,EAAIF,GACtCF,EAAS,KAAQ,KAAOD,IAAcK,GAAQ,KAAQ,KAAOL,IAAcK,GAAQ,KAAQ,GAAKL,IAAaK,GAAQ,IACtHJ,EAAQ,KAAOA,EAAQ,KAAOI,EAAO,EAAIF,GACtCF,EAAS,KAAQ,KAAOD,IAAcK,GAAQ,KAAQ,GAAKL,IAAaK,GAAQ,IACjFJ,EAAQ,KAAOA,EAAQ,KAAOI,EAAO,EAAIF,GACtCF,EAAS,KAAQ,GAAKD,IAAaK,GAAQ,IAE5CJ,GAIhB,OAAOC,CACT,EAGA,GAA2B,oBAAhBM,YAA6B,CACtC,IAAMC,EAAU,IAAID,YAAY,QAChCT,EAAa,SAA2BC,GACtC,OAAOS,EAAQC,OAAOV,EACxB,CACF,CAEA,IAAAW,EAAeZ,EC/BTa,EAAgC,oBAAXC,QAA0BA,OAAOC,qBAiB7C,SAAyBC,GACtC,IAAIC,EAAS,GACTC,GAAO,EAGLC,EAAiBN,EAAcG,EAAOF,OAAOC,iBAAmBC,EAGtE,SAASI,IACP,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAOC,EAAeR,EAAQ,GAAG,GACjCS,EAAQF,EAAK,GACbG,EAAOH,EAAK,GAClB,OAAIE,GAAS,IACPA,IAAUT,EAAOZ,OAAS,GAAuB,OAAlBY,EAAOS,KAExCR,EAFgEI,EAAQ,CAACI,EAAOC,SAGpFR,EAAeS,OAAOC,MAAK,SAACD,GACtBA,EAAKV,OAAMA,GAAO,QACHY,IAAfF,EAAKG,QAAqBd,GAAUjB,EAAW4B,EAAKG,QACxDX,IAAeS,KAAKP,GAASU,MAAMT,EACrC,GACF,GACF,CAEA,IAAMU,EAAW,CACfL,KAAAA,WACE,OAAO,IAAIP,SAAQ,SAACC,EAASC,GAC3BH,IACGS,MAAK,SAACL,GACL,IAAME,EAAQF,EAAK,GACbG,EAAOH,EAAK,GAClB,GAAIE,EAAQ,EAAG,CACb,IAAKT,EAAOZ,OAAQ,OAAOiB,EAAQ,CAAES,WAAOD,EAAWZ,MAAM,IAC7D,IAAMgB,EAA0C,CAC9CH,MAAOd,EACPC,MAAM,GAGR,OADAD,EAAS,GACFK,EAAQY,EACjB,CACA,IAAMC,EAAOlB,EAAOmB,OAAO,EAAGV,GAE9B,OADAT,EAASA,EAAOmB,OAAOV,EAAQC,GACxBL,EAAQ,CAAES,MAAOI,EAAMjB,MAAM,GACtC,IACCc,MAAMT,EACX,GACF,GASF,OANIV,IACFoB,EAASnB,OAAOC,eAAiB,WAC/B,OAAOsB,IACT,GAGKJ,CACT"}