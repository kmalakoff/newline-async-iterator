{"version":3,"file":"newline-async-iterator.min.js","sources":["../../src/decodeUTF8.ts","../../src/index.ts"],"sourcesContent":["/* eslint-disable no-undef */\n// https://developer.mozilla.org/en-US/docs/Glossary/Base64#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\n/* c8 ignore start */\nlet decodeUTF8 = function decode(uint8Array: Uint8Array): string {\n  let sView = \"\";\n\n  for (let nPart, nLen = uint8Array.length, nIdx = 0; nIdx < nLen; nIdx++) {\n    nPart = uint8Array[nIdx];\n    sView += String.fromCharCode(\n      nPart > 251 && nPart < 254 && nIdx + 5 < nLen /* six bytes */\n        ? /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */\n          (nPart - 252) * 1073741824 +\n            ((uint8Array[++nIdx] - 128) << 24) +\n            ((uint8Array[++nIdx] - 128) << 18) +\n            ((uint8Array[++nIdx] - 128) << 12) +\n            ((uint8Array[++nIdx] - 128) << 6) +\n            uint8Array[++nIdx] -\n            128\n        : nPart > 247 && nPart < 252 && nIdx + 4 < nLen /* five bytes */\n        ? ((nPart - 248) << 24) +\n          ((uint8Array[++nIdx] - 128) << 18) +\n          ((uint8Array[++nIdx] - 128) << 12) +\n          ((uint8Array[++nIdx] - 128) << 6) +\n          uint8Array[++nIdx] -\n          128\n        : nPart > 239 && nPart < 248 && nIdx + 3 < nLen /* four bytes */\n        ? ((nPart - 240) << 18) +\n          ((uint8Array[++nIdx] - 128) << 12) +\n          ((uint8Array[++nIdx] - 128) << 6) +\n          uint8Array[++nIdx] -\n          128\n        : nPart > 223 && nPart < 240 && nIdx + 2 < nLen /* three bytes */\n        ? ((nPart - 224) << 12) + ((uint8Array[++nIdx] - 128) << 6) + uint8Array[++nIdx] - 128\n        : nPart > 191 && nPart < 224 && nIdx + 1 < nLen /* two bytes */\n        ? ((nPart - 192) << 6) + uint8Array[++nIdx] - 128\n        : /* nPart < 127 ? */ /* one byte */\n          nPart\n    );\n  }\n\n  return sView;\n};\n/* c8 ignore stop */\n\nif (typeof TextDecoder !== \"undefined\") {\n  const decoder = new TextDecoder(\"utf8\");\n  decodeUTF8 = function decodeTextDecoder(uint8Array: Uint8Array): string {\n    return decoder.decode(uint8Array);\n  };\n}\n\nexport default decodeUTF8;\n","import indexOfNewline from \"index-of-newline\";\nimport decodeUTF8 from \"./decodeUTF8\";\n\nconst hasIterator = typeof Symbol !== \"undefined\" && Symbol.asyncIterator;\n\n/**\n * Create a newline iterator recognizing CR, LF, and CRLF using the Symbol.asyncIterator interface\n *\n * @param string The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-async-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */\n\nexport default function newlineIterator(\n  source: AsyncIterable<Uint8Array> | AsyncIterator<Uint8Array>\n): AsyncIterableIterator<string> {\n  let string = \"\";\n  let done = false;\n\n  /* c8 ignore start */\n  const sourceIterator = hasIterator ? source[Symbol.asyncIterator]() : source;\n  /* c8 ignore stop */\n\n  function generateNext(): Promise<number[]> {\n    return new Promise(function (resolve, reject) {\n      const [index, skip] = indexOfNewline(string, 0, true) as number[];\n      if (index >= 0) {\n        if (index !== string.length - 1 || string[index] === \"\\n\") return resolve([index, skip]);\n      }\n      if (done) return resolve([index, skip]);\n      sourceIterator.next().then(function (next) {\n        if (next.done) done = true;\n        if (next.value !== undefined) string += decodeUTF8(next.value);\n        generateNext().then(resolve).catch(reject);\n      });\n    });\n  }\n\n  const iterator = {\n    next(): Promise<IteratorResult<string, boolean>> {\n      return new Promise(function (resolve, reject) {\n        generateNext()\n          .then(function ([index, skip]) {\n            if (index < 0) {\n              if (!string.length) return resolve({ value: undefined, done: true });\n              const result: IteratorResult<string, boolean> = { value: string, done: false };\n              string = \"\";\n              return resolve(result);\n            }\n            const line = string.substr(0, index);\n            string = string.substr(index + skip);\n            return resolve({ value: line, done: false });\n          })\n          .catch(reject);\n      });\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<string> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<string>;\n}\n"],"names":["decodeUTF8","uint8Array","nPart","sView","nLen","length","nIdx","String","fromCharCode","TextDecoder","decoder","decode","decodeUTF8$1","hasIterator","Symbol","asyncIterator","source","string","done","sourceIterator","generateNext","Promise","resolve","reject","_ref2","_slicedToArray","indexOfNewline","index","skip","next","then","undefined","value","iterator","_ref3","_ref4","result","line","substr","this"],"mappings":"y1CAGA,IAAIA,EAAa,SAAgBC,GAG/B,IAFA,IAESC,EAFLC,EAAQ,GAEIC,EAAOH,EAAWI,OAAQC,EAAO,EAAGA,EAAOF,EAAME,IAC/DJ,EAAQD,EAAWK,GACnBH,GAASI,OAAOC,aACdN,EAAQ,KAAOA,EAAQ,KAAOI,EAAO,EAAIF,EAErB,YAAfF,EAAQ,MACLD,IAAaK,GAAQ,KAAQ,KAC7BL,IAAaK,GAAQ,KAAQ,KAC7BL,IAAaK,GAAQ,KAAQ,KAC7BL,IAAaK,GAAQ,KAAQ,GAC/BL,IAAaK,GACb,IACFJ,EAAQ,KAAOA,EAAQ,KAAOI,EAAO,EAAIF,GACvCF,EAAQ,KAAQ,KAChBD,IAAaK,GAAQ,KAAQ,KAC7BL,IAAaK,GAAQ,KAAQ,KAC7BL,IAAaK,GAAQ,KAAQ,GAC/BL,IAAaK,GACb,IACAJ,EAAQ,KAAOA,EAAQ,KAAOI,EAAO,EAAIF,GACvCF,EAAQ,KAAQ,KAChBD,IAAaK,GAAQ,KAAQ,KAC7BL,IAAaK,GAAQ,KAAQ,GAC/BL,IAAaK,GACb,IACAJ,EAAQ,KAAOA,EAAQ,KAAOI,EAAO,EAAIF,GACvCF,EAAQ,KAAQ,KAAQD,IAAaK,GAAQ,KAAQ,GAAKL,IAAaK,GAAQ,IACjFJ,EAAQ,KAAOA,EAAQ,KAAOI,EAAO,EAAIF,GACvCF,EAAQ,KAAQ,GAAKD,IAAaK,GAAQ,IAE5CJ,GAIR,OAAOC,GAIT,GAA2B,oBAAhBM,YAA6B,CACtC,IAAMC,EAAU,IAAID,YAAY,QAChCT,EAAa,SAA2BC,GACtC,OAAOS,EAAQC,OAAOV,IAI1B,IAAAW,EAAeZ,EChDTa,EAAgC,oBAAXC,QAA0BA,OAAOC,qBAiB7C,SACbC,GAEA,IAAIC,EAAS,GACTC,GAAO,EAGLC,EAAiBN,EAAcG,EAAOF,OAAOC,iBAAmBC,EAGtE,SAASI,IACP,OAAO,IAAIC,SAAQ,SAAUC,EAASC,GACpC,IAAAC,EAAAC,EAAsBC,EAAc,QAACT,EAAQ,GAAG,GAAhD,GAAOU,EAAPH,EAAA,GAAcI,EAAdJ,EAAA,GACA,OAAIG,GAAS,IACPA,IAAUV,EAAOZ,OAAS,GAAuB,OAAlBY,EAAOU,KAExCT,EAFgEI,EAAQ,CAACK,EAAOC,SAGpFT,EAAeU,OAAOC,MAAK,SAAUD,GAC/BA,EAAKX,OAAMA,GAAO,QACHa,IAAfF,EAAKG,QAAqBf,GAAUjB,EAAW6B,EAAKG,QACxDZ,IAAeU,KAAKR,SAAeC,SAKzC,IAAMU,EAAW,CACfJ,KAAiD,WAC/C,OAAO,IAAIR,SAAQ,SAAUC,EAASC,GACpCH,IACGU,MAAK,SAAyBI,GAAA,IAAAC,EAAAV,EAAAS,EAAA,GAAdP,EAAcQ,EAAA,GAAPP,EAAOO,EAAA,GAC7B,GAAIR,EAAQ,EAAG,CACb,IAAKV,EAAOZ,OAAQ,OAAOiB,EAAQ,CAAEU,WAAOD,EAAWb,MAAM,IAC7D,IAAMkB,EAA0C,CAAEJ,MAAOf,EAAQC,MAAM,GAEvE,OADAD,EAAS,GACFK,EAAQc,GAEjB,IAAMC,EAAOpB,EAAOqB,OAAO,EAAGX,GAE9B,OADAV,EAASA,EAAOqB,OAAOX,EAAQC,GACxBN,EAAQ,CAAEU,MAAOK,EAAMnB,MAAM,aAE/BK,QAWf,OANIV,IACFoB,EAASnB,OAAOC,eAAiB,WAC/B,OAAOwB,OAIJN"}