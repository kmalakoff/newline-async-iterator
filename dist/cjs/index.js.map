{"version":3,"sources":["index.ts"],"sourcesContent":["import indexOfNewline from 'index-of-newline';\n// @ts-ignore\nimport decodeUTF8 from './decodeUTF8.ts';\n\nconst hasIterator = typeof Symbol !== 'undefined' && Symbol.asyncIterator;\n\n/**\n * Create a newline iterator recognizing CR, LF, and CRLF using the Symbol.asyncIterator interface\n *\n * @param string The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-async-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */\n\nexport default function newlineIterator(source: AsyncIterable<Uint8Array> | AsyncIterator<Uint8Array>): AsyncIterableIterator<string> {\n  let string = '';\n  let done = false;\n\n  /* c8 ignore start */\n  const sourceIterator = hasIterator ? source[Symbol.asyncIterator]() : source;\n  /* c8 ignore stop */\n\n  function generateNext(): Promise<number[]> {\n    return new Promise((resolve, reject) => {\n      const args = indexOfNewline(string, 0, true) as number[];\n      const index = args[0];\n      const skip = args[1];\n      if (index >= 0) {\n        if (index !== string.length - 1 || string[index] === '\\n') return resolve([index, skip]);\n      }\n      if (done) return resolve([index, skip]);\n      sourceIterator.next().then((next) => {\n        if (next.done) done = true;\n        if (next.value !== undefined) string += decodeUTF8(next.value);\n        generateNext().then(resolve).catch(reject);\n      });\n    });\n  }\n\n  const iterator = {\n    next(): Promise<IteratorResult<string, boolean>> {\n      return new Promise((resolve, reject) => {\n        generateNext()\n          .then((args) => {\n            const index = args[0];\n            const skip = args[1];\n            if (index < 0) {\n              if (!string.length) return resolve({ value: undefined, done: true });\n              const result: IteratorResult<string, boolean> = {\n                value: string,\n                done: false,\n              };\n              string = '';\n              return resolve(result);\n            }\n            const line = string.substr(0, index);\n            string = string.substr(index + skip);\n            return resolve({ value: line, done: false });\n          })\n          .catch(reject);\n      });\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<string> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<string>;\n}\n"],"names":["newlineIterator","hasIterator","Symbol","asyncIterator","source","string","done","sourceIterator","generateNext","Promise","resolve","reject","args","indexOfNewline","index","skip","length","next","then","value","undefined","decodeUTF8","catch","iterator","result","line","substr"],"mappings":"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"}